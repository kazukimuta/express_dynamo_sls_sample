service: express-dynamoDB-template

plugins:
  - serverless-dynamodb-local    # ローカル開発時LocalDynamoDBを使う
  - serverless-webpack           # Webpack　babelつかったりする
                                 # https://github.com/serverless-heaven/serverless-webpack#example-with-babel
  - serverless-plugin-aws-alerts # CloudWatch(とアラート機能)連携を簡単に実施するプラグイン
  - serverless-offline           # ローカル開発時にオフライン実行を可能にする これは必ず最終行に定義する

custom:
  tableName: 'users-table-${self:provider.stage}' # DynamoDBのテーブル名

  # For serverless-dynamodb-localプラグイン
  # ローカル実行時に、resourceに定義したDynamoDBテーブルをローカルに作成
  dynamodb:
    start:
      migrate: true

  # For serverless-plugin-aws-alertsプラグイン
  # https://github.com/ACloudGuru/serverless-plugin-aws-alerts
  alerts:
    # cloudwatchのdashboardを作成する
    dashboards: true
    alarms:
      - functionErrors
      - functionThrottles
      - functionInvocations
      - functionDuration
  
  # For serverless-webpack
  webpackIncludeModules: true

provider:
  name: aws
  runtime: nodejs6.10
  stage: dev
  region: ap-northeast-1

  # LambdaからDynamoDBを利用するためのロール設定
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource:
        - { "Fn::GetAtt": ["UsersDynamoDBTable", "Arn" ] }

  # Lambda実行時の環境変数。ここで定義すると全てのfunctionで見えるようになる
  # DynamoDBのテーブル名(custom.tableName)を晒す
  environment:
    USERS_TABLE: ${self:custom.tableName}

functions:
  app:
    handler: handler.main # {メインファイル名(拡張子除く)}.{exportしたオブジェクト名}
    events:
      - http:
          method: ANY
          path: '/'
      - http:
          method: ANY
          path: '{proxy+}'

# DynamoDBを有効化するCludFormationの設定
resources:
  Resources:
    UsersDynamoDBTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        AttributeDefinitions:
          -
            AttributeName: userId
            AttributeType: S
        KeySchema:
          -
            AttributeName: userId
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:custom.tableName}
